import os
import shutil
import random

def display_welcome_ascii():
    welcome_ascii = r"""
 .--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--. 
/ .. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \
\ \/\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ \/ /
 \/ /`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'\/ / 
 / /\                                                                            / /\ 
/ /\ \   ________         __                                 _______            / /\ \
\ \/ /  |  |  |  |.-----.|  |.----.-----.--------.-----.    |_     _|.-----.    \ \/ /
 \/ /   |  |  |  ||  -__||  ||  __|  _  |        |  -__|      |   |  |  _  |     \/ / 
 / /\   |________||_____||__||____|_____|__|__|__|_____|      |___|  |_____|     / /\ 
/ /\ \                                                                          / /\ \
\ \/ /   __  __ __               _______           __ ______ _____   _______    \ \/ /
 \/ /   |  |/  |__|.-----.-----.|   _   |.-----.--|  |      |     |_|_     _|    \/ / 
 / /\   |     <|  ||     |  _  ||       ||     |  _  |   ---|       |_|   |_     / /\ 
/ /\ \  |__|\__|__||__|__|___  ||___|___||__|__|_____|______|_______|_______|   / /\ \
\ \/ /                   |_____|                                                \ \/ /
 \/ /                                                                            \/ / 
 / /\.--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--./ /\ 
/ /\ \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \/\ \
\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `' /
 `--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--' 
"""
    print(welcome_ascii)

def display_exit_ascii():
    exit_ascii = r"""
 .--..--..--..--..--..--..--..--..--..--..--..--..--..--..--. 
/ .. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \
\ \/\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ \/ /
 \/ /`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'\/ / 
 / /\   _______                   ___ ___                / /\ 
/ /\ \ |     __|.-----.-----.    |   |   |.-----.--.--. / /\ \
\ \/ / |__     ||  -__|  -__|     \     / |  _  |  |  | \ \/ /
 \/ /  |_______||_____|_____|      |___|  |_____|_____|  \/ / 
 / /\.--..--..--..--..--..--..--..--..--..--..--..--..--./ /\ 
/ /\ \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \/\ \
\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `' /
 `--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--' 
"""
    print(exit_ascii)

def random_anime():
    anime_list = [
        r"""
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⢰⠀⠀⠀⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢡⠠⠀⠀⡇⣯⡄⢀⢀⢰⠢⡀⢣⠘⡄⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⢂⠑⡀⡇⢿⠐⡈⠪⠄⣧⣐⣄⠿⡱⢄⠀⢺⠤⢀⢰⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡤⣀⠀⠑⢦⡤⢤⣥⡬⢧⠼⢧⠬⠯⡙⣷⣖⠧⡙⣒⣧⠵⣀⠩⣢⢿⣌⢓⢄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢄⠳⡌⠙⠡⣍⡓⠦⣌⠭⢬⣤⣡⠐⢎⢼⠷⢞⣼⣬⣱⣽⣲⢫⢻⢕⣍⠣⡱⡽⡲⡠⣀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡀⢕⡢⢈⠣⡾⢌⡃⠠⢘⣧⣋⠙⠦⡭⢭⡝⠶⣳⠷⢮⣽⣶⣷⣭⣹⢷⡷⣿⣯⣷⡨⢶⣿⣵⢌⡦⡀⠀⠀
⠀⠀⠀⠀⠀⢀⢈⠢⣹⣢⣨⠖⢍⡒⠶⠨⣡⣒⣷⣶⣭⡗⣚⠚⡭⠝⠴⠦⣤⠍⣛⣓⢯⣬⣿⣽⣽⡿⣿⣿⣮⣾⡽⢷⣲⢱⡀⢀
⠀⠀⠀⠀⠀⠈⢋⢼⢽⢯⢦⡙⣓⠞⡛⣳⣙⣾⣭⣧⣄⣀⠤⠐⠒⠉⠊⠙⢛⣿⣟⣯⣾⣭⣻⣮⣻⣿⣿⣿⣿⣿⣦⠘⣞⡌⡿⣼
⠀⠀⠀⠀⠀⠀⠀⣱⢻⡔⢤⣉⣐⣤⣋⣥⡤⣽⡷⠒⠌⡀⢀⣠⡤⠚⢈⣉⡴⠯⠛⠻⢃⢛⣻⣿⣷⣿⣿⡿⣿⣿⣿⣧⣿⣶⣲⢻
⠀⠀⠀⠀⠀⠀⠀⠀⠑⠺⢅⣝⣛⣥⣍⡁⢀⣉⣠⣴⠞⣋⣽⠡⢴⠾⣋⡡⢄⣲⣈⠭⠙⠛⣻⣿⣿⣷⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠒⡤⢤⢶⠚⣋⡩⢤⣖⣍⣉⣾⢋⣬⣛⣷⡿⠋⣨⣕⣦⠓⠁⠀⣀⠴⢎⣉⠵⢛⣻⣩⣽⣿⣿⣿⣿⣿⣿⣋⣟
⠀⠀⠀⠀⠀⠀⠀⠀⣴⣙⡽⣯⡝⣋⣡⣴⣤⢿⢡⣿⣿⡿⢊⣤⠾⠋⡩⠂⢀⣴⡫⠕⣊⠕⢁⠔⢁⡼⠋⠁⡁⣸⣿⣿⣿⣿⣛⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⡇⠀⠀⠀⢠⡀⢸⡻⡴⣷⣩⡟⠩⡠⢊⡠⣰⠟⢁⠄⠊⢀⡴⠋⠔⠉⠀⡘⢰⢀⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢡⢠⡄⠀⠀⡘⢩⠗⢪⢋⡟⣐⠥⠶⣹⠼⠑⢈⣀⣴⠜⢁⠀⠀⢠⡕⣽⠀⣟⣾⣿⢻⢻⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠚⡁⠋⠀⠠⡦⠢⠴⢥⣎⣜⣡⣶⣾⣶⣾⣿⣭⣽⣠⠴⢃⣔⣪⡞⣱⣷⠸⣼⣟⣧⣟⣼⣟⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡟⣷⡀⠀⠀⠀⣧⢠⡔⢋⣡⣾⣿⣿⢻⡏⠛⢻⣿⡟⢁⣴⣫⢻⣿⣲⣿⣾⡀⣷⣛⡟⣬⣿⢹⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⣛⠻⢿⣦⠀⠀⠈⠈⢡⡜⣿⡿⠟⡿⠃⠀⣄⢳⣿⡿⣿⢿⡿⣿⣽⣿⣿⡿⣧⣿⣿⣷⣿⠛⢸⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣡⠻⡷⣦⡿⠆⠀⠀⢠⣦⠀⢸⡅⠰⠃⠘⣦⡾⣧⡏⡄⢣⡄⣀⣿⣛⣬⡅⣶⣿⣿⣿⣿⢹⡄⣻⣿⣯⣿
⠀⠀⠀⠀⠀⠀⠀⠀⡠⠃⠀⢧⠀⣳⡀⠀⢠⣾⡿⠆⢈⣣⠀⠀⠀⡞⠃⠻⢀⠀⢾⣧⣉⣛⣉⣤⣶⣿⡟⠸⡌⢾⠀⣣⣿⡏⢫⡿
⠀⠀⠀⠀⠀⠀⠀⣾⣀⠀⠀⠙⠃⠘⠃⠠⣼⡇⠀⠀⢨⡖⠀⠀⠀⠁⠀⠀⠈⠁⠈⠻⢿⣿⣿⣿⠟⡹⠶⠁⡓⡘⣆⠿⠡⢠⡏⡿
⠀⠀⠀⠀⠀⠀⠀⠈⠺⢗⣦⣄⣀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠤⠀⠀⠀⠀⣫⣿⣿⣿⠀⢧⢸⠀⡿⢰⢣⢸⡇⡜⣸⣼
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⢮⣿⡟⡿⣿⡿⣿⡿⣿⠿⢻⡿⠟⢉⠀⠔⠁⠀⠀⠀⢿⣹⡟⣿⡄⣽⣿⢃⢣⢸⣮⢿⢼⢡⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢻⣧⣵⣾⣾⣿⠿⢻⠇⢀⠔⠁⠀⡜⠐⠀⠄⢐⣿⣎⣿⡹⢷⡄⣿⣿⣼⢿⡟⢹⢀⣡⡽⣽
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⠀⣠⡾⢁⣴⣏⡠⠊⠀⡠⠊⠀⠀⣄⣀⣼⣇⠫⢢⡧⢘⣧⡽⣬⢷⡞⡷⡠⢳⢾⠣⡼
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠖⠁⠀⢀⠟⡹⠋⠁⣴⠁⠀⠀⠀⣸⡟⠀⢦⣁⣬⢡⠷⣫⢵⡘⠸⠇⡷⠯⡍⠸⡔⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⡄⠀⠀⣼⣚⣁⣀⣞⣉⣀⣀⣴⣯⣾⣧⣴⣾⣿⣿⠊⠀⠈⠃⠹⠃⠀⠣⠀⠀⠀⢷⠤
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀
⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀
        """,
        r"""
  ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣬
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣆⡐⠲⣤⣤⣄⣈⠉⠛⠿⣿⣿⣿⣿⣿⢸⣦⣌⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⠘⢿⣿⣿⣿⣿⣶⣦⣈⠙⢿⡟⢸⣿⣿⣧⡈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⠿⠿⠿⠿⠟⠛⠛⠿⠛⠛⠛⠿⠿⣷⡌⠻⣿⣿⣿⣿⣿⣿⣿⣦⡅⢻⣿⣿⣿⣗⠀⠹⣿⣿⣿⠋⢿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣶⣄⠀⠲⣶⣶⣿⣿⣿⣿⣿⣿⣿⣷⣶⣮⣄⣙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⢻⠟⢁⣆⠈⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣷⣤⡈⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⣴⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠹⣿⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⡿⠿⢛⣋⣥⣴⣶⣷⣿⣿⣿⣿⣿⣟⣛⣛⠿⣷⠘⣷⣮⣝⡛⢿⣿⣿⣿⣿⣿⡿⢃⣦⢹⣿⣿⣿⢰⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣭⣤⣈⡉⠩⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡈⣿⣿⣿⣿⣦⡙⣿⣿⣿⡟⣡⣿⣿⢸⣿⣿⣿⢘⣋⣩⣭⡵⢞⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠈⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⡟⣸⣿⣿⣿⣿⣿⠟⢁⣴⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⠟⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠛⠋⠉⠀⠀⠀⠀⠀⠈⠙⠻⠳⣿⣿⣿⣿⡿⢋⣴⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⡟⠁⠀⣠⠾⢻⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⢠⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⠏⠀⣀⣭⢆⡴⣿⣿⣿⣿⡿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⢀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣥⣶⣿⡿⠋⠀⣼⡿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⢟⡓⠂⠀⠈⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣥⡾⠘⠋⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⡿⢁⣴⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠄⢀⢻⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣀⣴⣶⣤⣀⣤⣤⣤⣤⣀⣀⣀⣀⣀⡀⠀⠀⣠⣴⣶⣦⣤⣀⣀⣤⣴⣶⣾⣿⣟⠠⡟⢸⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢀⣯⣴⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠛⠛⠛⣿⣿⣿⣿⣿⣿⣿⣿⣷⢠⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠸⣿⣿⣧⢀⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣌⣉⣉⣩⡙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠹⡿⠁⣼⣿⣿⣿⣿⣿⣿⣿⡟⢀⣼⣿⣿⣿⣿⣿⣿⣿
⠀⠈⠙⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣍⡛⠿⣿⠿⠿⠿⠿⠿⣛⢛⡓⢀⠚⠛⣛⣛⣋⢉⣉⣉⠉⢀⣛⠻⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⣩⣥⣴⣶⠖⣈⣿⣿⣿⢟⣡⠾⢡⡏⣴⡿⠟⣫⣴⡯⢕⣠⣶⢛⣿⢸⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⡟⡫⠀⣛⣵⡾⢛⣵⢟⣡⡎⣼⠘⣫⣴⡿⢟⣩⣶⠟⡫⢑⣥⠎⣸⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣦⠉⢫⡶⢋⡵⣫⡶⣋⠔⣫⣵⠆⡇⡾⢟⣩⡶⢛⡭⣒⣽⠾⠛⢡⣾⣿⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⡷⠈⣿⣛⠛⠥⠮⠔⠫⠿⠷⠃⠃⣶⣋⡥⢚⣭⣼⡶⢖⣩⣾⢂⣿⣿⣿⣿⣿⣿⣿⣿⣿
⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣦⣀⠸⢟⡿⣫⠔⣻⡿⠟⠻⠀⠃⢋⡥⢔⡾⢟⣫⣶⡟⣫⠃⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⣿⣿⢁⡧⢚⢕⢋⣠⣶⢞⡵⣿⢀⠀⣶⣩⢖⠿⡋⣵⠾⣩⡃⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⠏⡾⡫⡀⣁⠵⡫⢔⣩⣾⣿⢸⠀⠏⡠⢔⠵⡪⢵⡾⡫⢎⡀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣟⣰⣅⣤⣾⣷⣿⣶⣿⣿⣿⣿⣈⣼⣭⣮⣴⣿⣷⣥⣾⣶⣿⣿⡈⣿⣿⣿⣿⣿⣿⣿⣿
⠰⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣴⣿⣆⢠⣇⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⡩⠭⠿⢈⠛⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
        """,
        r"""
   ⠀⠀⠀⠀⠀⠀⠸⣇⢿⣿⣿⣿⡙⣿⡔⢢⠙⢸⣧⢣⠹⣿⣿⣿⣿⣧⢻⡷⡌⢻⢷⡈⢦⠑⠆⠰⢀⠲⣡⠒⠴⣈⠦⡑⣌⠒⢸⡇⠃⣰⠻⠿⠿⠿⠿⠿⢿⢿⣿⣿⣿⣿⣿⣿⣿⡷⣌⠒⡌⠁⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠎⢁⡤⢞⣭⣶⣿⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⠓⡆⢃⣾⣿⡟⣽⠣⠜⡰⠌⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣞⣿⣿⣿⣷⡩⣿⣆⠫⢄⡘⠎⣇⢻⣿⣿⣿⣿⡎⣿⡇⢣⠚⡜⠤⢋⠆⠀⢃⠰⡁⢎⠐⢆⠲⣡⢊⡕⠘⣠⣴⣦⣶⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣌⠳⡌⡱⡀⠀⡀⠀⠀⠀⠀⠀⠠⢀⠔⣡⣼⣿⣿⣿⣿⢿⢋⠓⣬⣴⣿⣿⣿⣿⣿⣿⢏⡜⣡⣿⣿⢯⣼⡟⠬⡑⣂⠃⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣷⣜⣿⡃⢎⠴⣀⠘⡤⢻⣿⣿⣿⣿⡸⣷⡈⠵⡘⢌⠣⢎⠀⠈⡄⠘⢬⠀⢊⠱⡐⢆⠂⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣌⠱⡐⢆⠘⡐⠢⢄⡀⠄⠀⠀⢾⣿⣿⡿⣟⢫⡑⣢⣾⣿⣿⣿⣿⣿⣿⣿⣿⠟⢠⣼⣿⣿⢫⣾⡟⣑⢊⡱⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣄⢯⡘⠴⡡⠦⡘⢉⣿⣿⣿⣿⣧⢚⣿⡀⠝⣌⠲⡁⠆⠀⠰⠈⠆⡃⠀⢣⠉⢎⠜⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣌⠚⡔⢢⠈⣑⠒⣌⠢⢅⠀⡀⠈⠋⠔⢊⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⡿⣣⣿⠟⡰⢡⠎⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣯⢹⣆⠘⢢⡑⠦⣑⠂⠘⣿⣿⣿⣿⣧⡹⣿⡌⢄⠣⡕⢊⠄⠀⠡⠈⡕⡀⠀⠭⣌⢢⢹⣿⣿⠄⠀⠀⠀⠈⠙⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢊⡕⣂⠠⠙⣄⢣⢃⠀⠐⠀⠄⠂⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⣴⣿⠏⡜⠱⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣇⠹⣆⠡⢌⠣⢔⡩⢂⡘⣿⣿⣿⣿⣧⠹⣿⣄⠣⢌⡃⢎⡀⠀⠡⠐⣃⠀⠐⠤⢃⡌⣿⣿⡂⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠒⡌⢆⠘⡄⢊⠆⠌⠀⠌⠀⠂⡘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣋⢰⣾⠟⣣⠚⣌⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣦⠀⢣⡈⠜⠤⢃⡍⡔⡈⢿⣿⣿⣿⠷⣙⣫⣤⣤⣴⣤⣤⣤⣤⣤⡀⠂⠀⠈⢒⠤⠹⣿⠀⠀⠀⠀⠀⠠⡄⠦⣑⠢⡡⢄⡙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣗⠸⣌⢂⠘⡌⡚⠄⠁⡀⠂⠁⠀⢹⣿⣿⣿⣿⣿⣿⣿⡿⢟⡉⢢⣼⡟⣋⠜⠤⠓⠀⠀⠀⠀⠀⠀⣀⠠⡄⢲⡬⢷
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠒⡌⠡⣃⠲⡰⠱⢌⠹⢋⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢄⠀⠈⢌⢃⢻⠄⠀⠀⠠⣌⠱⣈⠖⣡⢒⡉⡖⡌⣢⠙⢿⣿⣿⣿⣿⣯⢻⣿⣿⡖⢠⢃⠆⢨⠑⡊⠄⠀⠂⠁⡈⠀⣿⣿⣿⣿⣿⠟⡩⠜⣂⣼⡟⣍⠲⡠⢍⠊⠀⠀⢀⠤⡐⢆⡱⢄⣳⣚⣭⣶⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣧⢿⣿⣿⣿⣿⣿⣷⡀⠩⡄⠰⣁⠇⡹⠀⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡎⢄⡀⠊⠌⠀⡀⢆⠓⡤⢓⠤⣋⠔⡣⢜⡰⡘⢤⢋⡄⠻⣿⣿⣿⣿⡆⢿⣿⣿⡂⢍⡘⡀⢣⠑⡂⢈⠀⠂⢀⠐⠘⡟⢛⡍⠲⠌⡑⣴⢋⠇⡜⡠⢃⠖⠁⠀⠀⢠⠎⢢⡑⠦⠋⣩⣴⣾⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⡞⣿⣿⣿⣿⣿⣿⣿⣆⠈⢕⡨⢒⢁⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⡘⡅⢖⡠⢓⡌⣚⠰⣉⠖⡌⢎⡱⢊⠴⣉⠖⢈⡰⢃⡘⢿⣿⣿⡟⡈⢿⣿⣧⠈⠖⣁⠢⣉⠔⠀⡀⠂⠠⠀⠂⠈⡆⢌⠡⡒⢅⠆⡣⢚⠤⡱⠁⠀⠀⠀⡄⢃⠊⡡⣔⣲⣿⣿⣿⣿⣿⡿⢍
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⡸⣿⣿⣿⣿⣿⣿⣿⣧⡀⢃⠇⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡗⣘⢢⠱⣡⠚⡤⢓⡌⢎⡜⢢⠱⡉⠒⡡⢆⠣⣌⢣⠒⡌⢻⣿⡏⢴⠘⣿⣷⡌⠓⠬⠐⡰⢈⠀⠄⢀⠁⢀⠂⠀⠜⢢⡑⠥⣊⠜⡡⢃⠜⠀⠀⠀⠠⢂⡐⢦⣽⣶⣿⣿⣿⣿⣿⡿⢏⠔⡣
⠀⠀⠀⠀⠀⠳⣦⣄⡀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣧⠘⡞⢿⣿⣿⣿⣿⣿⣿⡤⡀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣄⢣⠓⡤⢋⡔⢣⠘⢢⠈⠄⠃⣠⡿⢡⡙⡔⢢⢅⠫⢔⡂⢻⣿⣌⠆⣹⣿⡆⣙⠸⡀⢡⠀⠀⠀⠂⠈⠀⢀⠂⠨⡅⠜⣢⠡⢚⠤⠁⠀⠀⠀⢄⠆⣣⣿⣿⣿⣿⣿⣿⣿⡿⢏⡱⢊⡜⡔
⠀⠀⠀⠀⠀⠀⠙⣿⣿⡷⣌⡒⢤⡀⠀⠀⠈⢿⣿⣧⠘⣦⠙⣿⣿⣿⣿⣿⣿⠇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⡊⢟⡻⣿⡅⢎⡱⢌⠣⡜⡡⠊⠄⠈⣰⣾⡟⣡⠣⠜⣌⢃⠎⠜⢂⠡⣄⢻⣿⡜⠠⣿⡗⢨⢁⠇⢠⡙⡀⠀⠀⠁⠈⠀⠀⠐⡌⢣⠔⢣⡉⠀⠀⠀⢠⠚⢤⣫⣾⣿⣿⣿⣿⠿⣏⠱⠌⢦⠑⡣⠌⠀
⠀⠀⠀⠀⠀⠀⠀⠈⢿⣷⣮⡹⢶⣌⠳⢤⣀⠈⢻⣿⣧⡘⣧⡈⠟⣿⣿⣿⣿⢱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⠳⣈⠳⣌⢒⡩⢒⠥⢣⠉⢠⣾⣿⠏⡴⢡⢣⡙⠔⢊⠠⠎⢬⡑⡄⠊⣿⡝⡄⢹⡇⢠⠋⡄⠂⠒⢡⠀⠀⠀⡁⠀⠐⠢⢌⡑⢎⢢⠁⠀⢀⡰⢃⠍⣶⣿⣿⣿⠿⢏⡍⠲⡌⡱⢊⠦⣙⠐⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣷⣌⡻⣦⡑⢯⣄⠹⣿⣷⡈⢷⡌⢌⠻⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⡱⢌⡃⠆⡎⠐⡭⢈⠣⢰⣿⣿⢏⡓⡔⠣⢂⢨⡐⠎⠴⣉⣤⣶⣾⣿⡼⣟⡆⢹⠂⣌⠱⡘⠀⢀⠠⠀⠀⡀⠠⠀⠀⠘⠤⡱⣈⠆⡀⡔⠣⢔⡉⣾⡟⠿⡙⢥⢚⠰⡌⢓⡘⠤⣃⠖⠁⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣮⡛⢷⣌⠳⣘⢿⣿⣌⠹⣦⠑⠢⡝⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢘⡰⠃⢸⠀⡱⠂⠄⣃⠺⠥⠚⣀⢁⠦⢁⣢⡵⠚⢉⠉⠛⠿⣿⣿⡇⢿⡆⢸⠀⢆⠣⡍⠐⣌⠐⡀⠁⠀⡀⠁⠀⠀⠱⢂⢡⣴⡶⡄⠉⢦⠘⢧⠘⡥⣉⠦⣉⠖⣈⠣⠜⢁⠌⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣦⡙⢷⣬⠊⠻⣿⣦⠙⢿⣄⠱⢸⣿⣷⣿⡿⠿⢛⡛⠛⠛⠛⡛⠟⠿⠻⠿⢿⢿⣿⣿⣟⡳⢌⠲⠀⣡⠐⢣⠆⠀⠁⠄⠒⠐⢈⣴⣾⣿⠿⠀⡐⣈⡈⠴⡠⠴⠄⠆⣹⡇⠐⢂⠜⡰⠀⠡⠀⡁⠀⠄⠁⡀⠈⠄⠀⠘⣠⣿⠳⣡⠚⡀⠦⡙⠢⣍⠰⢂⠖⡰⠊⠀⢁⠔⠁⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣮⡙⣿⣦⡙⢿⣿⣄⠙⡦⢸⣿⡿⠋⡰⢂⠧⣘⠩⢎⡱⢡⠚⡔⢣⠒⠆⠦⢠⠤⠦⠤⠌⢤⠀⠓⢀⡠⠤⢄⡒⡌⡔⡠⢄⣉⠡⡔⢢⡙⠰⠁⢉⣀⣤⡤⠴⡄⢺⡇⢈⠰⢊⠅⠰⣀⠆⡄⠐⠀⠂⠠⠐⠀⡀⠰⣏⠇⠡⡄⢡⠃⠠⠱⣡⠢⢍⠢⠁⠀⢀⡘⠈⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣬⠻⣿⣦⡙⢿⣷⣠⢸⣿⠁⠠⣑⡉⠦⢁⣋⣤⣼⣶⣶⣶⣶⣶⠞⡒⠠⡐⢶⣶⡎⢀⠔⡊⢖⡐⢣⠎⡴⠱⡘⢔⡁⠌⣓⣨⣵⣶⣿⣿⣿⠿⣙⠰⢃⡆⣹⠇⡌⢣⠃⡌⡱⢌⠚⣌⠱⠈⢀⠁⠄⠂⢀⠓⡤⠊⠰⢸⠀⡹⠀⠣⠄⠃⠀⠀⠀⡠⠒⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣷⣝⢻⣿⣦⡙⢿⠸⡇⠀⠰⠁⣈⠔⣢⠹⣿⣿⣿⣿⣿⣿⠏⡐⣈⡁⡄⡀⠆⠠⣉⠖⣉⠦⢱⡧⡘⡔⠣⡍⠦⡙⡜⣿⣿⣿⣿⣿⢏⢳⡘⢤⢋⠆⡇⢼⡀⡱⠁⡐⠦⡑⢎⠱⠈⠄⠁⠠⠀⠂⢈⠀⢩⡐⢠⠘⡰⢀⡑⠆⠀⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣟⢿⣿⣿⣿⣿⣿⣿⣦⢛⣿⣿⣦⡘⣇⣠⣤⣾⣷⣾⣤⣣⡘⠿⣛⣭⣱⣾⡷⠿⠛⡙⣠⢁⠤⡐⢬⡘⡤⢡⡾⠗⢡⠂⠑⠬⡑⡜⡰⠭⡿⣟⡿⢃⠎⢦⢙⠢⣍⠲⠁⡆⡘⠁⠴⡉⢦⠑⡈⠀⠄⠂⢈⠀⠂⢁⠠⠀⢂⠀⠣⠄⡁⠀⠜⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣶⣙⢿⣿⣿⣿⣿⣿⣷⡘⢿⣿⣧⢹⣿⣿⣿⣿⣿⣿⠿⢿⠛⠍⠉⣁⣤⣵⣢⣝⣦⡑⢎⠲⣉⠦⣸⡀⠀⠀⠄⡀⠀⠈⠐⡱⢌⡱⢊⠴⡡⢣⢍⡚⢤⠋⡴⣈⠖⠡⠑⢀⡌⡓⢜⠢⢃⠠⠈⠀⠄⠂⢀⠐⠀⠄⠐⡀⠀⠀⠑⠀⠄⡘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣧⣝⠿⣿⣿⣿⣿⣿⣎⣉⠛⡃⠺⣿⣿⣿⡿⣝⠸⢂⣤⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣦⣱⣸⣿⣇⠀⠌⢀⠀⡐⠠⠀⠐⡡⢎⠱⣊⠥⢃⠦⣉⠦⡙⢤⢡⢚⠀⣀⠲⡌⡜⠬⡑⢂⠀⠄⠁⡀⠂⠀⠄⠈⠠⠀⠸⣧⠐⠀⣀⠢⢑⠂⠀⠀⠀⢠⢀⡀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡹⢷⣎⡳⣌⠻⣿⣿⣿⠇⣿⣧⠜⣂⠙⣿⣯⠓⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠄⠂⠐⠀⠄⡠⢣⠱⢌⢃⠦⡙⣌⠲⠡⢎⡑⠎⣆⢃⡐⠦⣑⠸⣐⢣⢉⠆⠀⠂⠐⠀⠠⠁⠀⠌⠀⠐⠀⠉⠀⢀⣦⣙⠢⠁⢀⠠⠌⣄⠡⣈⠤⡘⣄⠲⢄⢣⡘⠤⠉⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠞⢳⣞⡳⢤⡘⢹⠃⣿⠠⢌⠳⣧⠘⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣬⡠⣴⣢⡕⠢⢍⠢⠉⠒⣅⢢⠣⡙⠴⣈⠳⣠⠣⢜⡱⢌⡓⣌⠲⢌⡂⠁⠠⠁⠈⡀⠄⠁⠐⠀⠀⠐⡈⠀⡼⡷⢉⠂⡐⠎⡴⢉⠤⢓⡰⢌⠱⠀⠃⠈⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠡⢌⡙⠦⡑⠂⡀⢻⢐⡬⠆⠹⣇⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠿⢟⣋⣳⣬⣥⡒⢰⠒⡤⠌⢆⠣⢍⠲⢡⠓⡤⣙⠢⡜⢢⠜⠤⣋⠴⣁⠈⠀⠄⠁⡀⠠⢈⠀⠐⢠⡽⢡⡙⢤⠱⠁⠀⠉⠘⠀⠉⠂⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢆⡱⢃⡄⡈⡇⣿⠌⢦⠙⣦⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣵⣾⣿⣿⣿⣿⣿⣿⠥⣃⠞⣄⠫⡌⢓⡌⣃⠣⡍⡔⢢⠓⣌⠣⢎⡱⢂⠇⡆⠀⡁⠀⠂⢀⠐⠀⠼⡛⡋⢜⡡⠜⡄⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠜⡠⢹⣾⡆⣇⠂⢸⣆⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⡿⢟⢫⠓⠔⢊⠤⠓⡌⠥⢒⡡⠣⢜⢨⡑⠎⡴⢉⠖⣌⠱⣊⠔⠁⢀⠐⠈⠀⠄⠌⡱⢂⠍⣂⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡑⠂⢿⣿⡇⢮⣽⣿⡌⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠂⢈⠀⢠⢀⡀⠀⠈⠱⠘⡬⡑⡰⣉⢆⠣⣌⠓⣌⠣⠎⢤⠓⡌⢎⠀⠄⠀⠂⠁⢀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠶⣛⣛⣭⣧⣤⡛⣿⣆⠻⣧⢐⡘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢏⡀⢄⢆⡙⣆⡡⡜⣩⠃⡕⢢⠔⣡⠑⢆⡊⠵⣠⢋⠴⣉⠞⣄⠫⡘⢆⠀⠂⠐⠈⠀⢀⠠⠈⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⢿⢿⣿⣆⡛⢧⡐⡈⢂⠙⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣘⣦⣿⣿⣿⣿⣿⣷⡜⡌⢃⡚⠤⡙⢢⠑⢎⡰⢌⠲⣐⢊⠤⣃⠍⠆⠐⠀⡁⠂⠀⢄⡂⢄⠁⠂⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠿⠟⠛⠋⠑⢊⠐⠎⠲⢄⢫⡙⠤⠙⢬⣕⣂⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢣⠘⡔⡡⢆⡙⢢⠜⡬⣑⠢⢍⡒⢬⠘⡌⠀⠂⢀⠀⡜⠤⠚⡌⢆⡈⠄⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠄⠀⠄⢀⠠⠀⢀⠀⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠈⠁⠘⠐⠒⠤⢂⢄⡉⡘⠠⢈⠛⠆⠘⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⡹⢄⠓⡌⡜⡡⢎⠔⣢⠙⢢⠜⢢⠃⠀⠄⠁⠀⠀⣌⠣⡙⢌⠲⢌⢢⠐⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⢀⠐⠈⡀⠄⠀⢂⠠⠐⠀⠄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠁⠓⠢⠌⢀⠃⢀⡛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡖⣌⠳⢌⠲⣑⠪⠜⡤⢋⠖⡨⠁⢀⠂⠈⠀⢀⠸⡀⠇⡭⡘⡌⢆⣃⠚⣄⠂⠀⠀⠀⠀⠀⠀⠀⠀⠐⠈⠠⠀⠂⠁⢀⠀⢂⠠⠀⠂⠁⡀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠠⠀⡀⠄⠠⠀⢸⣿⣦⣍⠺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⢋⢆⠳⡨⢅⡋⢔⡡⠊⢀⠐⠀⠀⡀⠈⢠⠃⡝⡸⢄⡱⡘⠦⢌⠣⡌⢆⠀⠀⠀⠀⠀⠀⠀⠈⠄⠂⠁⠀⠄⠁⣀⣨⣤⣶⣦⣁⠂⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⡤⣐⣠⢈⠀⠄⠁⠄⡀⠐⢀⠁⣿⣿⣿⣿⣷⡄⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⡘⠌⡥⢃⠦⡉⠆⢀⠐⠀⠀⠠⠐⢀⡌⢣⡉⢖⠡⠎⡔⣡⢋⢆⠳⢌⡊⠄⠀⠀⠀⠀⠀⠠⠁⠀⠁⡀⠈⣤⣶⣿⣿⣿⣿⣿⣿⣦⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡰⠤⣷⣾⣿⣿⣿⣿⡿⠿⠦⠁⠠⢀⠁⠠⢠⣿⣿⣿⣿⣿⡏⡄⠀⠈⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣷⢍⢚⠰⣃⢒⠉⠀⠀⠀⠠⠐⠀⢂⣾⠍⢦⡉⢦⠙⡜⡰⢡⠎⣌⠣⢒⡘⡄⠀⠀⠀⠀⠀⠂⠀⠀⡐⠀⠑⢻⣿⣿⣿⣿⣿⣿⣿⣿⣷
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢀⠄⡛⢛⡛⣿⣿⣿⠿⠛⠉⠁⠠⢀⠐⠠⠁⠠⠈⠄⣸⣿⣿⣿⣿⣿⣷⠱⠀⠂⠄⠀⠉⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣉⠲⢌⡑⠆⠀⠀⡀⠐⠈⠀⠄⣡⣿⠯⡜⢢⠍⢦⢙⡰⢡⢃⠎⡴⢉⠦⡑⡸⠀⠀⠀⠀⠀⠀⠀⠐⠀⡈⠀⠄⠘⢿⣿⣿⣿⡿⠟⠛⠉
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠄⣢⣽⣿⣿⣿⣿⣿⣿⣿⡷⠆⠀⠌⠠⠁⠂⡀⠂⠌⠐⠠⢀⣿⣿⣿⣿⣿⣿⣿⣇⢣⠀⢈⠰⡀⠀⠈⠙⠻⣿⣿⣟⣿⣿⣿⣿⣿⣿⡿⢿⡉⢖⠡⢣⠘⠀⠀⡀⠂⢀⠐⠈⠀⣴⣿⣏⠳⣌⢣⠚⡤⢣⠜⡡⠎⡜⡰⡉⢦⢑⡡⠃⠀⠀⠀⠀⠀⠀⠈⠐⠀⡈⢀⠂⠀⠟⠋⠁⠀⡐⢈⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠂⠁⣄⣾⣿⣿⣿⣿⣿⣿⠿⠋⢁⠠⢀⠈⠀⠂⢁⠐⢀⠐⠠⠈⡀⣰⣿⣿⣿⣿⣿⣿⣿⣿⡂⠆⢀⠱⢢⠡⡈⠀⠄⠈⠁⠊⡝⢊⠻⠜⡙⢬⠙⢢⡘⠬⠑⠁⠀⠐⡀⠠⠐⠀⡀⢂⣼⣿⡟⢤⠃⡔⠣⣍⠲⡡⢎⠥⡙⠴⣁⠳⢌⡒⠔⡣⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠠⢀⠡⠀⠐⢈⣴⣾⣿⣾
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠐⠠⢈⣤⣿⣿⣿⣿⣿⣿⡿⠛⠉⠠⠐⠀⠄⠂⡀⠂⠄⠀⠀⠂⠀⠂⠁⠀⣽⣿⣿⣿⣿⣿⣿⣿⣿⡧⢩⠄⡊⢥⢒⡩⠆⡄⠁⡀⠂⠀⠉⠐⠉⠈⠀⠉⠀⠀⠀⡀⠐⠈⡀⢄⠀⠂⡐⢠⣿⣿⡻⣈⠖⠀⢎⡱⢂⠧⡑⢎⠲⣉⠖⣡⠓⣌⠒⣍⠲⠀⠀⢀⠀⠀⠀⠀⠀⠀⠈⠀⠀⡀⠄⡰⠛⠎⠉⢀⠁
⠀⠀⠀⠀⠀⠀⠀⠀⢀⠐⠠⢈⣴⣿⣿⣿⣿⣿⣿⠟⠋⠀⠄⡁⠂⠁⡈⠠⠐⠀⠁⠐⠠⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣻⣿⣷⢃⠆⢡⣷⣎⡔⢣⠜⡡⢆⠢⡁⠄⢂⠐⠀⠁⠠⠁⡈⠄⡐⡌⠦⡑⠂⢀⠁⣴⣿⣿⠧⣑⢢⠁⠈⠦⡱⣉⠖⡩⢎⡱⢌⡚⢤⡙⢤⢋⠤⡓⡄⠀⡀⠄⠀⡀⠀⠀⠀⠀⠀⠐⠀⢀⠠⠀⠄⠂⠠⠀
⠀⠀⠀⠀⠀⠀⠀⡀⠂⣐⣴⣿⣿⣿⣿⣿⣿⠏⠁⠄⠂⢁⠂⢀⠁⠂⠄⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⡧⣿⣿⣿⣍⠂⢢⣟⣿⣿⣦⡙⢤⠘⢢⠑⡎⠔⣌⠢⣑⠢⠱⢌⢒⡡⠚⡔⠡⠐⢀⣾⣿⣯⠟⣢⠑⡎⠀⠈⡖⡡⢆⡹⣐⠣⡜⢢⢍⠲⡘⠦⣉⠖⡡⢆⠀⠀⢀⠐⠀⠀⠀⠀⠀⢀⠀⠌⠀⡀⠂⠐⠈⠀⠄
⠀⠀⠀⠀⠀⢀⠂⣄⣾⣿⣿⣿⣿⣿⣿⠟⠁⠠⢈⠠⠈⢀⠐⠀⡐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣾⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣎⡁⢆⣿⣿⣿⣿⣿⣦⡣⢄⠣⡘⠱⢂⠱⠀⠃⢁⠠⢆⡱⢩⠌⠁⢠⣾⣿⣻⡝⡸⢄⠳⠀⢀⠡⠐⡑⠎⡴⢨⠱⣌⢃⢎⡱⣉⠖⡡⢎⡱⢊⡍⠲⣄⡀⠀⢁⠀⠀⠠⠀⠂⠠⠁⠀⠄⠁⡈⠄⠂
⠀⠀⠀⠀⠐⠠⣴⣿⣿⣿⣿⣿⣿⠟⠁⡀⠂⡁⠠⠀⠌⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢭⣿⣿⣿⣿⣿⣿⣿⠁⣿⣿⣿⢶⡀⠜⣾⣿⣿⣿⣿⣿⣿⠢⠅⠀⠁⠠⠀⡐⠀⢦⠑⡪⠔⡣⠌⢠⣿⣿⣿⠳⣌⠱⡈⠇⢀⠠⠀⠄⠠⢉⠲⣉⠖⣨⠜⣢⠱⡐⢎⡱⢢⡑⢦⠸⡑⠦⡌⡱⠤⠀⠀⢂⠁⠄⠁⠠⠁⡀⠂⠀⠄⠂
⠀⠀⠀⠌⢠⣿⣿⣿⣿⠿⠛⠉⠀⠄⠂⠀⡁⠠⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡘⣸⣿⣿⣿⣿⣿⣿⠧⢸⣿⣿⣿⢧⠀⢎⣿⣿⣿⣿⣿⣿⣿⣧⠃⠀⠁⠠⢀⠠⡉⢆⠣⣅⠫⠔⣰⣿⣿⠿⠇⠳⢈⡓⣉⣤⣤⣤⣴⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣬⣥⣭⣤⣑⣊⠁⠀⢈⠀⠠⠈⢀⠁⠄⠐⠀⡁⢀⠂
⠀⠀⠌⣰⣿⣿⢟⡿⡉⠑⠈⡀⠁⡀⠀⠄⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠂⢠⠣⣽⣿⣿⣿⣿⣿⣟⠸⢸⣿⣿⣿⣇⠂⢣⣾⣿⣿⣿⣿⣿⣿⣿⡆⠁⠈⠀⢄⢢⡙⠤⠓⠌⣃⣨⣍⣶⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⡟⢿⡻⢟⠿⢛⡛⡛⢏⠃⠀⡐⠀⠄⠁⡐⠀⡀⠂⢈⠀⠄⠀⠄
⠀⠈⣴⣾⠟⠋⢁⠀⠐⠈⡀⠐⡀⠐⠀⢂⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡐⢅⡚⢤⠃⢠⢃⢞⣿⣿⣿⣿⣿⡿⣌⠃⣼⣿⣿⣿⣎⠀⠇⣾⣿⣿⣿⣿⣟⣿⣿⣿⡀⢀⠁⢊⣠⣴⣬⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣷⣿⣾⣷⣿⣶⣶⣧⡒⠬⠤⠤⡌⣂⠑⠂⡙⠀⢀⠐⠀⡈⢀⠂⢀⠐⠀⡐⠀⡀⠂⢈⠀
⠀⡟⠋⠀⠄⡈⠀⠄⠁⠂⡀⢁⠠⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠊⢆⡜⠢⡜⢀⣤⣣⣎⣾⣿⣿⣿⣿⣿⠓⡬⠃⣿⣿⣿⣿⡖⠀⠏⢾⣿⣿⡿⣿⣿⣿⠿⢛⣩⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡽⢣⢃⡓⣘⠤⢋⠑⠀⠀⠂⠠⠁⠀⠄⢀⠂⢀⠂⠠⠐⠀⡐⠀⡀
⠀⠠⠐⢈⢠⠄⠁⢂⠈⠄⠠⠀⡀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⢊⠴⣉⢶⣼⣿⣾⣷⣾⣿⣿⣿⣿⣿⣿⡟⢧⡙⠴⢡⣿⣿⣿⣿⡚⠀⡍⢢⠽⣯⡿⠟⣋⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣑⠣⢥⡘⢄⡋⠂⠀⠄⠂⢁⠐⠈⡀⠂⠠⠀⠂⢀⠂⢀⠁⠠⠐⠀
⠀⢡⣰⣯⣟⠀⢈⠀⠐⠠⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠚⣌⠱⣪⣽⣿⠿⠿⠿⠿⠿⡟⣟⠻⡟⠿⠧⢙⢢⡙⡌⢸⣿⣿⣿⣿⠱⠀⣑⠪⠐⣡⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡛⢦⡑⢎⢒⡸⠈⠀⡀⠐⠠⠈⡀⠄⠁⠠⢀⠁⠄⠁⠠⠀⠂⢀⠁⠀⠀
⢴⣿⣿⣿⠇⠈⡀⠐⠈⡀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠈⢣⣈⣡⣥⣦⣬⣾⣶⣷⣾⣷⣿⣾⣿⣿⣿⣶⣾⣦⣴⣈⠸⢿⣟⣯⢏⠱⠀⢁⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⢧⡙⢤⡘⢤⠊⠀⡀⠐⠀⠁⠄⠂⡀⠐⠈⡀⠄⠂⠀⠌⡀⠀⠁⠀⠀⠀⠀
⠻⢟⣩⡶⠃⢀⠐⠀⡁⠠⠀⠁⠀⠀⠀⠀⠀⠀⢀⠠⠔⢶⠻⢟⠿⣿⠿⠿⠿⣛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⠿⢛⡂⢌⡁⠊⢠⣚⣼⣯⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢍⠢⡜⢢⠘⠂⠁⡀⠠⠁⠈⠄⠐⠀⠀⠄⠁⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠘⠋⢀⠀⠂⢀⠁⡀⠄⠁⠈⠀⠀⠀⠀⠀⢀⠎⡑⠎⠂⢉⢈⣀⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣏⠙⣆⠚⡤⡙⠆⣀⢚⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⡜⢌⡱⢌⠂⠁⠀⠀⠀⠄⠀⢂⠈⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠌⠀⠄⠂⢁⠀⠂⠠⠐⠈⠀⠀⠀⠀⠀⠐⠈⠀⣄⣴⣾⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢏⠆⠭⣄⠫⡐⡍⠴⡉⠠⣴⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡝⢪⠜⢢⡐⠂⠀⢀⠠⠀⠂⠠⠈⠀⠄⠠⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠠⠈⠀⡀⢀⠠⠁⠐⡀⠀⠀⠀⠀⠀⡠⢔⣪⣽⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⡥⢋⡜⡌⢣⢂⠧⠱⡘⠦⠁⣳⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⡳⢉⠆⡜⠄⠀⢀⠠⠀⠠⠀⠡⠀⡁⠂⠐⠀⠄⡈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠁⠀⡀⠀⠄⠁⠀⠀⠀⠀⢠⣜⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣏⢣⡙⡔⢣⠒⡌⢆⡁⠎⡱⠨⠅⢢⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⡿⣛⠤⢃⡚⠌⠀⠠⠀⠄⠂⢁⠠⠁⠐⠀⠄⢁⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⡐⠈⠀⠄⠁⠠⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢟⠳⢌⢆⡱⢌⠣⢜⡈⠦⠘⠠⡄⠋⠐⣼⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣟⣿⡽⢋⠓⡜⡠⢣⠡⣘⠀⠐⠀⠂⠐⠀⠂⠀⠄⠁⡈⠀⠄⠂⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠐⢀⠈⠄⠂⠈⠀⠀⠀⠀⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⡍⢎⡜⡌⢦⡘⠆⡍⢆⡩⢒⡉⢆⡈⠀⡇⢼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⡻⡝⢩⠒⡌⡅⢋⠔⡡⢆⡑⠂⠀⠈⠄⠈⡀⠡⠀⡁⢀⠂⠀⠌⠀⡐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠌⠀⡀⠂⠐⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢋⠳⡘⢆⠲⡘⠔⡌⡓⡌⠦⣁⠣⢌⡃⠆⠘⡄⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⢿⣿⠟⡞⡉⠖⡡⢃⡜⠰⡈⠜⠤⢃⠆⡘⠀⠠⠁⠂⠁⡀⠐⢀⠠⠀⠠⠁⡀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
        """,
    ]
    print(random.choice(anime_list))

# Command tambahan
def search(pattern):
    found = False
    for root, dirs, files in os.walk(os.getcwd()):
        for name in dirs + files:
            if pattern in name:
                print(os.path.join(root, name))
                found = True
    if not found:
        print(f"Tidak ada file atau direktori yang ditemukan dengan pola '{pattern}'.")

def tree():
    for root, dirs, files in os.walk(os.getcwd()):
        level = root.replace(os.getcwd(), '').count(os.sep)
        indent = ' ' * 4 * level
        print(f"{indent}{os.path.basename(root)}/")
        subindent = ' ' * 4 * (level + 1)
        for f in files:
            print(f"{subindent}{f}")

def log(command):
    with open("command_log.txt", "a") as log_file:
        log_file.write(f"Perintah: {command}\n")

def joke():
    jokes = [
        "Why do programmers prefer dark mode? Because the light attracts bugs!",
        "Why don't programmers like nature? It has too many bugs.",
        "Why did the computer go to the doctor? Because it had a virus!",
        "Why did the programmer quit his job? Because he didn't get arrays.",
        "How many programmers does it take to change a light bulb? None, that's a hardware problem!"
    ]
    print(random.choice(jokes))


# Command find_large untuk mencari file lebih besar dari ukuran tertentu
def find_large(size):
    try:
        size = int(size)  # Konversi ukuran ke integer
    except ValueError:
        print("Ukuran tidak valid. Harap masukkan angka.")
        return

    found = False
    for root, dirs, files in os.walk(os.getcwd()):
        for file_name in files:
            file_path = os.path.join(root, file_name)
            file_size = os.path.getsize(file_path)

            if file_size > size:
                print(f"{file_path} - {file_size} bytes")
                found = True

    if not found:
        print(f"Tidak ada file yang lebih besar dari {size} bytes.")


 #Commands like ls, pwd, cd, mkdir, etc., go here

def ls():
    print("\n".join(os.listdir(os.getcwd())))

def pwd():
    print(os.getcwd())

def cd(path):
    try:
        os.chdir(path)
        print(f"Changed directory to: {os.getcwd()}")
    except FileNotFoundError:
        print(f"Error: Directory '{path}' not found.")
    except NotADirectoryError:
        print(f"Error: '{path}' is not a directory.")

def mkdir(dir_name):
    try:
        os.mkdir(dir_name)
        print(f"Directory '{dir_name}' created.")
    except FileExistsError:
        print(f"Error: Directory '{dir_name}' already exists.")

def rmdir(dir_name):
    try:
        os.rmdir(dir_name)
        print(f"Directory '{dir_name}' removed.")
    except FileNotFoundError:
        print(f"Error: Directory '{dir_name}' not found.")
    except OSError:
        print(f"Error: Directory '{dir_name}' is not empty.")

def touch(file_name):
    try:
        with open(file_name, 'w') as f:
            pass
        print(f"File '{file_name}' created.")
    except Exception as e:
        print(f"Error: {e}")

def rm(file_name):
    try:
        os.remove(file_name)
        print(f"File '{file_name}' removed.")
    except FileNotFoundError:
        print(f"Error: File '{file_name}' not found.")

def cp(source, destination):
    try:
        shutil.copy(source, destination)
        print(f"Copied '{source}' to '{destination}'.")
    except FileNotFoundError:
        print(f"Error: Source file '{source}' not found.")

def mv(source, destination):
    try:
        shutil.move(source, destination)
        print(f"Moved/Renamed '{source}' to '{destination}'.")
    except FileNotFoundError:
        print(f"Error: Source file '{source}' not found.")

def clear():
    os.system('cls' if os.name == 'nt' else 'clear')

def help():
    print("""
Available commands:
- ls: List files and directories
- pwd: Print current directory
- cd <path>: Change directory
- mkdir <name>: Create a directory
- rmdir <name>: Remove a directory (if empty)
- touch <file>: Create an empty file
- rm <file>: Remove a file
- cp <source> <destination>: Copy a file
- mv <source> <destination>: Move or rename a file/directory
- clear: Clear the terminal
- exit: Exit the CLI
- log <command>: Save command history to a log file
- joke: Display a random joke
- search <pattern>: Search for files/directories by name
- find_large <size>: Display files larger than the specified size (in bytes)
    """)



# Main command loop
def main():
    display_welcome_ascii()  # Show welcome ASCII art
    while True:
        command = input(">>> ").strip()
        if not command:
            continue

        args = command.split()
        cmd = args[0]

        if cmd == "ls":
            ls()
        elif cmd == "pwd":
            pwd()
        elif cmd == "cd":
            if len(args) > 1:
                cd(args[1])
            else:
                print("Usage: cd <path>")
        elif cmd == "mkdir":
            if len(args) > 1:
                mkdir(args[1])
        elif cmd == "search":
            if len(args) > 1:
                search(args[1])
            else:
                print("Usage: search <pattern>")
        elif cmd == "tree":
            tree()
        elif cmd == "log":
            if len(args) > 1:
                log(args[1])
            else:
                print("Usage: log <command>")
        elif cmd == "joke":
            joke()
        elif cmd == "find_large":
            if len(args) > 1:
                find_large(args[1])
            else:
                print("Usage: find_large <size>")
        elif cmd == "random_anime":
            random_anime()
        elif cmd == "clear":
            clear()
        elif cmd == "help":
            help()
        elif cmd == "exit":
            display_exit_ascii()  # Show exit ASCII art
            break
        else:
            print(f"Command '{cmd}' not recognized. Type 'help' for a list of commands.")

if __name__ == "__main__":
    main()
